(def-type Sign (STop Neg Zer Pos SBot))

(def-leq Sign (e1 Sign e2 Sign)
    (match (e1 e2)
        (case (SBot x)      true)
        (case (Neg Neg)     true)
        (case (Zer Zer)     true)
        (case (Pos Pos)     true)
        (case (_ STop)      true)
        (case _             false)))

(def-lub Sign (e1 Sign e2 Sign)
    (match (e1 e2)
        (case (SBot x)      x)
        (case (x SBot)      x)
        (case (Neg Neg)     Neg)
        (case (Zer Zer)     Zer)
        (case (Pos Pos)     Pos)
        (case _             STop)))

(def-height Sign (e Sign)
    (match e
        (case SBot  3)
        (case Neg   2)
        (case Zer   2)
        (case Pos   2)
        (case STop  1)))

(def-fun sum (e1 Sign e2 Sign)
    (match (e1 e2)
        (case (SBot _)  SBot)
        (case (_ SBot)  SBot)
        (case (Neg Neg) Neg)
        (case (Neg Zer) Neg)
        (case (Neg Pos) STop)
        (case (Zer Neg) Neg)
        (case (Zer Zer) Zer)
        (case (Zer Pos) Pos)
        (case _         STop)))

(rule (A Neg))
(rule (B Pos))

(rule (R x) ((A x)))
(rule (R x) ((B x)))
