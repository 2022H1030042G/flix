(def-type BoolLat (BTop BTrue BFalse BBot))

(def-bot BoolLat BBot)

(def-leq (e1 BoolLat e2 BoolLat)
    (match (e1 e2)
        (case (BBot _)          true)
        (case (BTrue True)      true)
        (case (BFalse BFalse)   true)
        (case (_ BTop)          true)))

(def-lub (e1 BoolLat e2 BoolLat)
    (match (e1 e2)
        (case (BBot x)          x)
        (case (x BBot)          x)
        (case (BTrue BTrue)     BTrue)
        (case (BFalse BFalse)   BFalse)
        (case _                 BTop)))

(def-height (e BoolLat)
    (match (e)
        (case BTop      1)
        (case BTrue     2)
        (case BFalse    2)
        (case BBot      3)))

(def-fun and (e1 BoolLat e2 BoolLat)
    (match (e1 e2)
        (case (BBot _)          BBot)
        (case (_ BBot)          BBot)
        (case (BTrue BTrue)     BTrue)
        (case (BTrue BFalse)    BFalse)
        (case (BFalse BTrue)    BFalse)
        (case (BFalse BFalse)   BFalse)
        (case (BTop _)          BTop)
        (case (_ BTop)          BTop)))

(rule (A BTrue))
(rule (B BFalse))

(rule (R x) ((A x)))
(rule (R x) ((B x)))
