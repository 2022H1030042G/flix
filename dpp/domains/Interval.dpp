Lattice Interval = Top
                 | Interval(b: Int, e: Int) where b <= e
                 | Bot;

Order Interval(i1: Interval, i2: Interval) = (i1, i2) match {
    case (Bot, _) => true;
    case (Interval(b1, e1), Interval(b2, e2)) => b2 <= b1 && e2 >= e1;
    case (_, Top) => true;
    case _ => false;
}

Join Interval(i1: Interval, i2: Interval) = (i1, i2) match {
    case (Bot, i) => i;
    case (i, Bot) => i;

    case (Interval(b1, e1), Interval(b2, e2)) =>
        if ((max(e1, e2) - min(b1, b2)) <= 10)
            Interval(min(b1, b2), max(b2, e2))
        else
            Top;
    case _ => Top;
}

Function lift(i: Int) = Interval(i, i);

@Strict
Function sum(i1: Interval, i2: Interval) = (i1, i2) match {
    case (Bot, _) => Bot;
    case (_, Bot) => Bot;

    case (Interval(b1, e1), Interval(b2, e2)) => Interval(b1 + b2, e1 + e2);

    case _ => Top;
}

Function min(i1: Int, i2: Int) = if (i1 <= i2) i1 else i2;
Function max(i1: Int, i2: Int) = if (i1 >= i2) i1 else i2;
